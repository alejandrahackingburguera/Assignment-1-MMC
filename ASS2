model "ProductiCo_Optimal_Production"
  uses "mmxprs"

  declarations
    ! ---- Basic problem indices ----
    number_of_products = 8
    number_of_days = 7
    products = 1..number_of_products
    days = 1..number_of_days

    ! ---- Input data arrays ----
    sale_price, production_time : array(products) of real
    day_mat: array(days, days) of real
    hours_FT, hours_PT, wage_FT, wage_PT, W_MAX: integer
    Union_limit : real
    H_SETUP: integer
    production_threshold_2: integer
    fixedcosts_7 : integer
    BIG_M: real

    ! ---- Decision variables ----
    x, y: array(products, days) of mpvar
    f_t, p_t: array(days) of mpvar
    z, a: array(days) of mpvar

    ! ---- Linear constraint placeholders ----
    F_T: array(days) of linctr
    P_T: array(days) of linctr
    WorkforceCapacity: array(days) of linctr

    ! ---- For sensitivity analysis ----
    TempConstraint: array(days) of linctr
    W_MAX_limit, num_iterations: integer

  end-declarations

  ! Load all numerical data from external file
  initialisations from "ass2_data.dat"
    sale_price production_time day_mat hours_FT hours_PT wage_FT wage_PT W_MAX production_threshold_2 fixedcosts_7 BIG_M Union_limit
  end-initialisations

   ! Integer requirements (Variable type requirements)
   forall(p in products, d in days) do
     x(p,d) is_integer
     y(p,d) is_binary
   end-do

   forall(d in days) do
     f_t(d) is_integer
     p_t(d) is_integer
     z(d) is_binary
     a(d) is_binary
   end-do

  ! Objective Function:
  TotalRevenue := sum(p in products, d in days) sale_price(p) * x(p, d)
  !TotalLabourCost := sum(d in days) (hours_FT * wage_FT * F_T(d) + hours_PT * wage_PT * P_T(d))
  TotalLabourCost := 5 *(hours_FT * wage_FT * sum(d in days) f_t(d) + hours_PT * wage_PT * sum(d in days) p_t(d))
  TotalFixedCost := sum(d in days) fixedcosts_7 * y(7, d)
  Profit := TotalRevenue - TotalLabourCost - TotalFixedCost

  ! Define on-duty staff for the 5-day schedule.
  forall(i in days) do
    F_T(i) := sum(d in days) day_mat(i,d) * f_t(d)
    P_T(i) := sum(d in days) day_mat(i,d) * p_t(d)
  end-do

  ! Constraints
  ! 1. Daily Labour Hour Adequacy and Workforce Capacity
  forall(d in days) do
    LabourAdequacy(d) := sum(p in products) production_time(p) * x(p, d) + H_SETUP * z(d) <= hours_FT * F_T(d) + hours_PT * P_T(d)
    WorkforceCapacity(d) := F_T(d) + P_T(d) <= W_MAX
  end-do

  ! 2. Weekly Union Regulation
  UnionRegulation := sum(d in days) hours_PT * P_T(d) <= Union_limit * (sum(d in days) (hours_FT * F_T(d) + hours_PT * P_T(d)))

  ! 3. Product 2 Piecewise Production Rule:
  forall(d in days) do
    P2_Regular_Capacity(d) := x(2, d) <= production_threshold_2
    P2_Extra(d) := x(8, d) <= BIG_M * a(d)
    P2_Extra_Link(d) := production_threshold_2 - x(2, d) <= BIG_M * (1 - a(d))
  end-do

  ! 4. Logical Production Indicator:
  forall(p in products, d in days) do
    IndicatorActivation(p, d) := x(p, d) <= BIG_M * y(p, d)
  end-do

  ! 5. Joint Setup Constraint for Products 3 and 4:
  forall(d in days) do
    JointProd_3and4(d) := z(d) >= y(3, d) + y(4, d) - 1
  end-do

 ! Solve the model
  maximize(Profit)

  ! Post-solution report
  if (getprobstat = XPRS_OPT) then
     fopen("productico_results.txt" ,F_OUTPUT)
      intial_threshold := getparam("xprs_miprelstop")
      updated_threshold := intial_threshold / 5
      setparam("xprs_miprelstop", updated_threshold )

      writeln("Initially, xprs_miprelstop was set to ", intial_threshold,
              ", and has since been updated to ", updated_threshold)

      maximize(Profit)
      BaselineProfit := getobjval
      writeln("\nOptimal Weekly Profit: £", strfmt(BaselineProfit, 0, 2), "\n")

      ! ---- Display staff schedule ----
      writeln(" ")
      writeln("BASELINE ON-DUTY STAFF")
      writeln("Day      | FT Staff | PT Staff | Total Staff")
      forall(d in days) do
        writeln(strfmt(d, -8), " | ", strfmt(round(getsol(F_T(d))), 8),
                " | ", strfmt(round(getsol(P_T(d))), 8),
                " | ", strfmt(round(getsol(F_T(d)) + getsol(P_T(d))), 8))
      end-do

      ! ---- Display production schedule ----
      writeln(" ")
      writeln("BASELINE PRODUCTION SCHEDULE (Units)")
      write(strfmt("Product", 7), " |")
      forall(d in days) do
        write(strfmt("Day " + d + " |", 14))
      end-do
      writeln

      forall(p in products) do
        if p = 2 then
          write(strfmt("2 ", -7), " |")
          forall(d in days) do
            combined_val := getsol(x(2,d)) + getsol(x(8,d))
            write(strfmt(round(combined_val), 12) + " |")
          end-do
          writeln
        elif p <> 8 then
          write(strfmt(p, -7), " |")
          forall(d in days) do
            write(strfmt(round(getsol(x(p,d))), 12) + " |")
          end-do
          writeln
        end-if
      end-do

     ! Sensitivity analysis for Wmax
     ! writeln("\n=== SENSITIVITY ANALYSIS FOR W_MAX (MARGINAL PROFIT OF EXTRA WORKER) ===")
     ! writeln(strfmt("New W_MAX", -12), "| ", strfmt("New Weekly Profit", -20), "| ", "Marginal Gain")
     ! writeln("------------|----------------------|-----------------")

     ! current_profit := BaselineProfit
     ! writeln(strfmt(W_MAX, -12), "| ", strfmt(current_profit, -20, 2), "| ", strfmt("Baseline", -15))

     ! W_MAX_limit := 550
     ! num_iterations := W_MAX_limit - W_MAX

     ! if num_iterations > 0 then
     !   forall(i in 1..num_iterations) do
     !     new_w_max := W_MAX + i

     !     ! Deactivate the original W_MAX constraint
     !     forall(d in days) sethidden(WorkforceCapacity(d), true)

     !     ! Create and activate a new temporary constraint with the higher limit
     !     forall(d in days) TempConstraint(d) := F_T(d) + P_T(d) <= new_w_max

     !     maximize(Profit)

     !     if (getprobstat = XPRS_OPT) then
     !       new_profit := getobjval
     !       marginal_gain := new_profit - current_profit
     !       writeln(strfmt(new_w_max, -12), "| ", strfmt(new_profit, -20, 2), "| ", "£", strfmt(marginal_gain, 0, 2))
     !       current_profit := new_profit
     !     else
     !       writeln(strfmt(new_w_max, -12), "| Infeasible or not solved", -20, "|")
     !       break
     !     end-if

     !     ! Deactivate the temporary constraint to clean up for the next loop
     !     forall(d in days) sethidden(TempConstraint(d), true)
     !   end-do
     ! end-if

     ! ! Reactivate the original constraint before finishing
     ! forall(d in days) sethidden(WorkforceCapacity(d), false)
  else
      writeln("No optimal solution found for the baseline model.")
      exit(1)
  end-if
  
  fclose(F_OUTPUT) 

end-model

***** DATA FILE : 
sale_price : [100 420 350 490 550 100 1115]
production_time : [1.0 2.0 2.7 2.4 4.5 0.7 9.5]
Union_limit : 0.25
hours_FT : 8
hours_PT : 6
wage_FT : 80
wage_PT : 35
W_MAX : 500
BIG_M : 6000
fixedcosts_7 : 2000
production_threshold_2  : 100
H_SETUP: 75

day_mat : [1 0 0 1 1 1 1
        1 1 0 0 1 1 1
        1 1 1 0 0 1 1
        1 1 1 1 0 0 1
        1 1 1 1 1 0 0
        0 1 1 1 1 1 0
        0 0 1 1 1 1 1]
