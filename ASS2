model "ProductiCo_Optimal_Production"
  uses "mmxprs"

  declarations
    ! ---- Basic problem indices ----
    number_of_products = 8
    number_of_days = 7

    products = 1..number_of_products
    days = 1..number_of_days

    ! ---- Input data arrays ----
    sale_price, production_time : array(products) of real   ! Product-specific parameters
    day_mat: array(days, days) of real                              ! Defines which staff work which days (shift pattern)
    hours_FT, hours_PT, wage_FT, wage_PT, W_MAX: integer             ! Hours and wages for full-time & part-time workers
    Union_limit : real                                              ! Weekly union limit on PT hours
    H_SETUP: integer                                                ! Setup hours needed when certain products are made together
    production_threshold_2: integer                                 ! Threshold for regular production of product 2
    fixedcosts_7 : integer                                           ! Fixed cost per day for product 7
    BIG_M: real

    ! ---- Decision variables ----
    x, y: array(products, days) of mpvar   ! x(p,d): quantity of product p on day d
                                           ! y(p,d): binary variable, 1 if product p produced on day d

    f_t, p_t: array(days) of mpvar         ! f_t(d), p_t(d): FT/PT workers starting shift d
    z, a: array(days) of mpvar             ! z(d): joint setup indicator; a(d): binary for extra production of product 2

    ! ---- Linear constraint placeholders ----
    F_T: array(days) of linctr             ! Linear constraint defining total FT workers available on day d
    P_T: array(days) of linctr             ! Linear constraint defining total PT workers available on day d
  end-declarations



  ! Load all numerical data from external file
  initialisations from "ass2_data.dat"
    sale_price production_time day_mat hours_FT hours_PT wage_FT wage_PT W_MAX production_threshold_2 fixedcosts_7 BIG_M Union_limit
  end-initialisations


   ! Integer requirements (Variable type requirements)
   forall(p in products, d in days) do
   x(p,d) is_integer
   y(p,d) is_binary
   end-do

   forall(d in days) do
   f_t(d) is_integer
   p_t(d) is_integer
   z(d) is_binary
   a(d) is_binary
   end-do

  ! Define on-duty staff for the 5-day schedule.
  ! Each row i of day_mat tells us which start days d contribute workers
  ! to the shift on day i. This builds the “effective staff available”
  ! from the staggered start days.
  forall(i in days) do
    F_T(i) := sum(d in days) day_mat(i,d) * f_t(d)
    P_T(i) := sum(d in days) day_mat(i,d) * p_t(d)
  end-do

  ! Objective Function:
  ! Total revenue from all products over all days
  TotalRevenue := sum(p in products, d in days) sale_price(p) * x(p, d)

  ! Total labour cost for full-time and part-time staff
  TotalLabourCost := sum(d in days) (hours_FT * wage_FT * F_T(d) + hours_PT * wage_PT * P_T(d))

  ! Fixed daily production cost incurred when product 7 is made
  TotalFixedCost := sum(d in days) fixedcosts_7 * y(7, d)

  ! Final profit (objective to maximize)
  Profit := TotalRevenue - TotalLabourCost - TotalFixedCost

  ! Constraints

  ! 1. Daily Labour Hour Adequacy and Workforce Capacity
  !    Total time needed for production (including setup) must not exceed
  !    total available labour hours (FT + PT).
  !    Workforce Capacity: daily headcount cannot exceed W_MAX.
  forall(d in days) do
    LabourAdequacy(d) := sum(p in products) production_time(p) * x(p, d) + H_SETUP * z(d) <= hours_FT * F_T(d) + hours_PT * P_T(d)
    WorkforceCapacity(d) := F_T(d) + P_T(d) <= W_MAX
  end-do

  ! 2. Weekly Union Regulation
  !    Ensures PT hours ≤ Union_limit × total weekly labour hours.
  UnionRegulation := sum(d in days) hours_PT * P_T(d) <= Union_limit * (sum(d in days) (hours_FT * F_T(d) + hours_PT * P_T(d)))

  writeln("")

  ! 3. Product 2 Piecewise Production Rule:
  !    Product 2 has a “regular” production capacity (up to threshold),
  !    beyond which “extra” production is only allowed if binary a(d)=1.
  forall(d in days) do
    P2_Regular_Capacity(d) := x(2, d) <= production_threshold_2
    P2_Extra(d) := x(8, d) <= BIG_M * a(d)
    P2_Extra_Link(d) := production_threshold_2 - x(2, d) <= BIG_M * (1 - a(d))
  end-do

  ! 4. Logical Production Indicator:
  !    Ensures product p can only be produced if its binary flag y(p,d)=1.
  forall(p in products, d in days) do
    IndicatorActivation(p, d) := x(p, d) <= BIG_M * y(p, d)
  end-do

  ! 5. Joint Setup Constraint for Products 3 and 4:
  !    If both product 3 and product 4 are made on the same day,
  !    then setup variable z(d)=1 (setup time is required).
  forall(d in days) do
    JointProd_3and4(d) := z(d) >= y(3, d) + y(4, d) - 1
  end-do

  ! 7. (Optional) Additional constraint for senstitivity analysis: Daily production limit
  ! forall(p in products, j in days) do
  !    x(p,j) <= 500
  ! end-do

 ! Solve the model
  writeln("Solving Baseline Model (T7 = ", production_time(7), " hours)")
  maximize(Profit)


  ! Post-solution report
  if (getprobstat = XPRS_OPT) then
      intial_threshold := getparam("xprs_miprelstop")
      updated_threshold := intial_threshold / 4
      setparam("xprs_miprelstop", updated_threshold )

      writeln("Initially, xprs_miprelstop was set to ", intial_threshold,
              ", and has since been updated to ", updated_threshold)

      maximize(Profit)
      BaselineProfit := getobjval
      writeln("\nOptimal Weekly Profit: £", strfmt(BaselineProfit, 0, 2), "\n")

      ! ---- Display staff schedule ----
      writeln(" ")
      writeln("BASELINE ON-DUTY STAFF")
      writeln("Day      | FT Staff | PT Staff | Total Staff")
      forall(d in days) do
        writeln(strfmt(d, -8), " | ", strfmt(round(getsol(F_T(d))), 8),
                " | ", strfmt(round(getsol(P_T(d))), 8),
                " | ", strfmt(round(getsol(F_T(d)) + getsol(P_T(d))), 8))
      end-do


      ! ---- Display production schedule ----
      writeln(" ")
      writeln("BASELINE PRODUCTION SCHEDULE (Units)")
      write(strfmt("Product", 7), " |")
      forall(d in days) do
        write(strfmt("Day " + d + " |", 14))
      end-do
      writeln

      forall(p in products) do
        if p = 2 then
          ! For product 2, include both regular and extra production
          write(strfmt("2 ", -7), " |")
          forall(d in days) do
            combined_val := getsol(x(2,d)) + getsol(x(8,d))
            write(strfmt(round(combined_val), 12) + " |")
          end-do
          writeln
        elif p <> 8 then
          ! For all other products (excluding dummy product 8)
          write(strfmt(p, -7), " |")
          forall(d in days) do
            write(strfmt(round(getsol(x(p,d))), 12) + " |")
          end-do
          writeln
        end-if
      end-do

      fclose(F_OUTPUT)

  else
      writeln("No optimal solution found for the baseline model.")
      exit(1)
  end-if

end-model

***** DATA FILE : 
sale_price : [100 420 350 490 550 100 1115 420]
production_time : [1.0 2.0 2.7 2.4 4.5 0.7 9.5 3.0]
Union_limit : 0.25
hours_FT : 8
hours_PT : 6
wage_FT : 80
wage_PT : 35
W_MAX : 500
BIG_M : 3993.3333333333333
fixedcosts_7 : 2000
production_threshold_2  : 100
H_SETUP: 75

day_mat : [1 0 0 1 1 1 1
        1 1 0 0 1 1 1
        1 1 1 0 0 1 1
        1 1 1 1 0 0 1
        1 1 1 1 1 0 0
        0 1 1 1 1 1 0
        0 0 1 1 1 1 1]

