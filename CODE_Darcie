model "ProductiCo_Optimal_Production"
  uses "mmxprs"

  declarations
    ! ---- Basic problem indices ----
    number_of_products = 8
    number_of_days = 7

    products = 1..number_of_products
    days = 1..number_of_days

    ! ---- Input data arrays ----
    sale_price, production_time : array(products) of real   ! Product-specific parameters
    day_mat: array(days, days) of real                              ! Defines which staff work which days (shift pattern)
    hours_FT, hours_PT, wage_FT, wage_PT, W_MAX: integer             ! Hours and wages for full-time & part-time workers
    Union_limit : real                                              ! Weekly union limit on PT hours
    H_SETUP: integer                                                ! Setup hours needed when certain products are made together
    production_threshold_2: integer                                 ! Threshold for regular production of product 2
    fixedcosts_7 : integer                                           ! Fixed cost per day for product 7
    BIG_M: real

    ! ---- Decision variables ----
    x, y: array(products, days) of mpvar   ! x(p,d): quantity of product p on day d
                                           ! y(p,d): binary variable, 1 if product p produced on day d

    f_t, p_t: array(days) of mpvar         ! f_t(d), p_t(d): FT/PT workers starting shift d
    z, a: array(days) of mpvar             ! z(d): joint setup indicator; a(d): binary for extra production of product 2

    ! ---- Linear constraint placeholders ----
    F_T: array(days) of linctr             ! Linear constraint defining total FT workers available on day d
    P_T: array(days) of linctr             ! Linear constraint defining total PT workers available on day d
  end-declarations

  initialisations from "ass2_data.dat"   ! ---- Load all numerical data from external file ----
    sale_price production_time day_mat hours_FT hours_PT wage_FT wage_PT W_MAX production_threshold_2 fixedcosts_7 BIG_M Union_limit
  end-initialisations


   ! Integer requirements
   forall(p in products, d in days) do
   x(p,d) is_integer
   y(p,d) is_binary
   end-do

   forall(d in days) do
   f_t(d) is_integer
   p_t(d) is_integer
   z(d) is_binary
   a(d) is_binary
   end-do

    ! **** FIX 2: Correctly define on-duty staff for the 5-day schedule ****
  forall(i in days) do
    F_T(i) := sum(d in days) day_mat(i,d) * f_t(d)
    P_T(i) := sum(d in days) day_mat(i,d) * p_t(d)
  end-do

  ! F_T(1) := f(1) + f(4) + f(5) + f(6) + f(7)
  ! F_T(2) := f(1) + f(2) + f(5) + f(6) + f(7)
  ! F_T(3) := f(1) + f(2) + f(3) + f(6) + f(7)
  ! F_T(4) := f(1) + f(2) + f(3) + f(4) + f(7)
  ! F_T(5) := f(1) + f(2) + f(3) + f(4) + f(5)
  ! F_T(6) := f(2) + f(3) + f(4) + f(5) + f(6)
  ! F_T(7) := f(3) + f(4) + f(5) + f(6) + f(7)


  ! P_T(1) := p(1) + p(4) + p(5) + p(6) + p(7)
  ! P_T(2) := p(1) + p(2) + p(5) + p(6) + p(7)
  ! P_T(3) := p(1) + p(2) + p(3) + p(6) + p(7)
  ! P_T(4) := p(1) + p(2) + p(3) + p(4) + p(7)
  ! P_T(5) := p(1) + p(2) + p(3) + p(4) + p(5)
  ! P_T(6) := p(2) + p(3) + p(4) + p(5) + p(6)
  ! P_T(7) := p(3) + p(4) + p(5) + p(6) + p(7)

  ! Objective Function:

  TotalRevenue    := sum(p in products, d in days) sale_price(p) * x(p, d)
  TotalLabourCost := sum(d in days) (hours_FT * wage_FT * F_T(d) + hours_PT * wage_PT * P_T(d))
  TotalFixedCost  := sum(d in days) fixedcosts_7 * y(7, d)

  Profit := TotalRevenue - TotalLabourCost - TotalFixedCost

  ! Constraints

  ! 1. Daily Labour Hour Adequacy and Workforce Capacity
  forall(d in days) do
    LabourAdequacy(d) := sum(p in products) production_time(p) * x(p, d) + H_SETUP * z(d) <= hours_FT * F_T(d) + hours_PT * P_T(d)
    WorkforceCapacity(d) := F_T(d) + P_T(d) <= W_MAX
  end-do

  ! 3. Weekly Union Regulation
  UnionRegulation := sum(d in days) hours_PT * P_T(d) <= Union_limit * (sum(d in days) (hours_FT * F_T(d) + hours_PT * P_T(d)))

  writeln("")

  ! 4. Product 2 Piecewise Production
  forall(d in days) do
    P2_Regular_Capacity(d) := x(2, d) <= production_threshold_2
    P2_Extra(d) := x(8, d) <= BIG_M * a(d)
    P2_Extra_Link(d) := production_threshold_2 - x(2, d) <= BIG_M * (1 - a(d))
  end-do

  ! 5. Logical Constraint: Production Indicator Activation
  forall(p in products, d in days) do
    IndicatorActivation(p, d) := x(p, d) <= BIG_M * y(p, d)
  end-do

  ! 6. Logical Constraint: Joint Production Setup for products 3 & 4
  forall(d in days) do
    JointProd_3and4(d) := z(d) >= y(3, d) + y(4, d) - 1
  end-do

  ! 7. Additional constraint for analysis: Daily production limit
  ! forall(p in products, j in days) do
  !    x(p,j) <= 500
  ! end-do


  writeln("Solving Baseline Model (T7 = ", production_time(7), " hours)")
  maximize(Profit)

  if (getprobstat = XPRS_OPT) then
    BaselineProfit := getobjval
    writeln("\nOptimal Weekly Profit: £", strfmt(BaselineProfit, 0, 2), "\n")

    ! fopen("T9.5_productico_final.txt", F_OUTPUT)
    ! writeln("BASELINE SHIFT PATTERN PLAN")
    ! writeln("Shift    | FT Shift | PT Shift")
    ! forall(d in days) do
    !   writeln(strfmt(d, -8), " | ", strfmt(round(getsol(f_t(d))), 8), " | ", strfmt(round(getsol(p_t(d))), 8))
    ! end-do

    writeln(" ")
    writeln("BASELINE ON-DUTY STAFF")
    writeln("Day      | FT Staff | PT Staff | Total Staff")
    forall(d in days) do
      writeln(strfmt(d, -8), " | ", strfmt(round(getsol(F_T(d))), 8), " | ", strfmt(round(getsol(P_T(d))), 8), " | ", strfmt(round(getsol(F_T(d))+getsol(P_T(d))), 8))
      end-do

 !   fopen("my_production_schedule.txt", F_OUTPUT)
 !   writeln("BASELINE PRODUCTION SCHEDULE (Units)")
 !   write(strfmt("Product", 7), " |")
 !   forall(d in days) do
 !     write(strfmt("Day " + d + " |", 14))
 !   end-do
 !   writeln
 ! forall(p in products) do
 !   write(strfmt(p, -7), " |")
 !   forall(d in days) do
 !     write(strfmt(round(getsol(x(p,d))), 12) + " |")
 !   end-do
 !   writeln
 ! end-do

  writeln(" ")
  writeln("BASELINE PRODUCTION SCHEDULE (Units)")
  write(strfmt("Product", 7), " |")
  forall(d in days) do
  write(strfmt("Day " + d + " |", 14))
  end-do
  writeln
    forall(p in products) do
      if p = 2 then
        write(strfmt("2 ", -7), " |")
        forall(d in days) do
          combined_val := getsol(x(2,d)) + getsol(x(8,d))
          write(strfmt(round(combined_val), 12) + " |")
        end-do
        writeln
      elif p <> 8 then
        write(strfmt(p, -7), " |")
        forall(d in days) do
          write(strfmt(round(getsol(x(p,d))), 12) + " |")
        end-do
        writeln
      end-if
    end-do

  fclose(F_OUTPUT)
  else
    writeln("No optimal solution found for the baseline model.")
    exit(1)
  end-if

!	if(getslack(UnionRegulation)<0.0001) then
!	 	 writeln("Dual variable for weekly union regulation is £ ", strfmt(getdual(UnionRegulation),0,2))
!		  a := getrange(XPRS_LOACT, UnionRegulation)
!		  b := getrange(XPRS_UPACT, UnionRegulation)
!		  writeln("The range for the dual for resource is (", a , "," , b ,")" )
!	 end-if

old := getparam("xprs_miprelstop")
new := old/5
setparam("xprs_miprelstop", new)
writeln("xprs_miprelstop was", old, ", now set to ", new)
maximize(Profit)
Profit2 := getobjval
writeln("\nOptimal Weekly Profit: £", strfmt(Profit2, 0, 2), "\n")

end-model
