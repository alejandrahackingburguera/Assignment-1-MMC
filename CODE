model SmeltCo
uses "mmxprs"

declarations
    number_of_metal_alloys = 3
    number_of_rawmaterials = 4

    metal_alloys = 1..number_of_metal_alloys
    raw_mat = 1..number_of_rawmaterials

    metal_alloys_names: array(metal_alloys) of string
    raw_mat_names: array(raw_mat) of string

    max_quant, max_prod, revenue, cost: array(raw_mat) of real
    min_copper, max_copper, min_aluminium: array(metal_alloys) of real

    resources_for_metal_alloys: array(metal_alloys, raw_mat) of mpvar
    production_of_each_metal_alloy: array(metal_alloys) of mpvar

    composition_allowed: array(metal_alloys, raw_mat) of integer
    
    total_produced: array(raw_mat) of real
end-declarations

initialisations from "smeltco_data.dat"
    metal_alloys_names raw_mat_names max_quant max_prod revenue cost composition_allowed min_copper max_copper min_aluminium 
end-initialisations

! Objective function: maximize profit = revenue - raw material cost
total_profit := sum(p in metal_alloys) (revenue(p) * production_of_each_metal_alloy(p)) - sum(p in metal_alloys, r in raw_mat) (cost(r) * resources_for_metal_alloys(p, r))

! Constraints
forall(r in raw_mat) do
    sum(p in metal_alloys) resources_for_metal_alloys(p, r) <= max_quant(r)
end-do

! Constraints:
forall(p in metal_alloys) do
    production_of_each_metal_alloy(p) <= max_prod(p)
end-do

! For each product, percentage limits for copper
forall(p in metal_alloys) do
    resources_for_metal_alloys(p, 2) >= min_copper(p) * production_of_each_metal_alloy(p)    ! Copper is resource 2
    resources_for_metal_alloys(p, 2) <= max_copper(p) * production_of_each_metal_alloy(p)
end-do


resources_for_metal_alloys(3, 1) >= min_aluminium(3) * production_of_each_metal_alloy(3)    ! Aluminium is resource 1

forall(p in metal_alloys) do
   sum(r in raw_mat) resources_for_metal_alloys(p, r) = (production_of_each_metal_alloy(p) * 0.9)    ! CHECK THIS !!!!
end-do

forall(p in metal_alloys, r in raw_mat) do
    if composition_allowed(p, r) = 0 then
        resources_for_metal_alloys(p, r) = 0
    end-if
end-do


! Non-negativity
forall(p in metal_alloys, r in raw_mat) do
    resources_for_metal_alloys(p, r) >= 0
end-do

maximize(total_profit)

writeln("Total Profit is: Â£", getobjval)
forall(p in metal_alloys) writeln(metal_alloys_names(p), " production (kg): ", getsol(production_of_each_metal_alloy(p)))
forall(p in metal_alloys, r in raw_mat) do
    if getsol(resources_for_metal_alloys(p, r)) > 0 then
        writeln("Raw material [", raw_mat_names(r), "] used for ", metal_alloys_names(p), ": ", getsol(resources_for_metal_alloys(p, r)))
    end-if
end-do

forall(r in raw_mat) do
    total_produced(r) := sum(p in metal_alloys) getsol(resources_for_metal_alloys(p, r))
    writeln("Total Raw material [", raw_mat_names(r), "] used: ", total_produced(r))
end-do
!forall(p in metal_alloys, r in raw_mat) do
!    writeln("composition_allowed(", p, ",", r, ") = ", composition_allowed(p, r))
!end-do


end-model



